# Дано множество A из N точек (N > 2, точки заданы своими координатами x, y). Найти наибольший периметр треугольника,
# вершины которого принадлежат различным точкам множества A, и сами эти точки (точки выводятся в порядке их
# перечисления при задании множества A). Расстояние R между точками с координатами (x1, y1) и (x2,y2) вычисляется
# по формуле: R = √((x2 - x1)^2 + (y2 - y1)^2). Для хранения данных о каждом наборе точек следует
# использовать по два списка: первый список для хранения абсцисс, второй - для хранения ординат.
from random import randint  # Импортирование модуля random
n = input('Введите N: ')  # Ввод данных
current_per = 0
max_per = 0
a, b, c = 0, 0, 0

while type(n) != int:  # Обработка исключений
    try:
        n = int(n)
    except ValueError:
        print('Неправильный ввод')
        n = input('Введите N: ')

A = [(randint(0, 9), randint(0, 9)) for _ in range(n)]  # Генерация списка с координатами
print('Список:', A)


def length(x, y):  # Функция для вычисления расстояния R
    return ((x[1] - x[0]) ** 2 + (y[1] - y[0]) ** 2) ** 0.5


def per(x, y, z):  # Функция для вычисления периметра
    return length(x, y) + length(y, z) + length(x, z)


for i in range(n - 2):  # Циклы для перебора списка с координатами
    for j in range(i + 1, n - 1):
        for k in range(j + 1, n):
            current_per = per(A[i], A[j], A[k])  # Текущий периметр
            if current_per > max_per:
                max_per = current_per  # Сохранение текущего периметра
                a, b, c = A[i], A[j], A[k]  # Сохранение координат макс. периметра

print('Наибольший периметр:', max_per)  # Вывод результата
print('Координаты:', a, b, c)
